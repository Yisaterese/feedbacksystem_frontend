{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3000';\nexport const getFeedback = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/feedback/entries`);\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to fetch feedback');\n    }\n    return data.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch feedback');\n  }\n};\nexport const createFeedback = async feedbackData => {\n  try {\n    const response = await axios.post(`${API_URL}/feedback/entry`, feedbackData);\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to create feedback');\n    }\n    return data.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create feedback');\n  }\n};\nexport const getAnalytics = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/feedback/analytics`);\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to fetch analytics');\n    }\n    return data.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch analytics');\n  }\n};","map":{"version":3,"names":["axios","API_URL","getFeedback","response","get","data","success","Error","message","error","_error$response","_error$response$data","createFeedback","feedbackData","post","_error$response2","_error$response2$data","getAnalytics","_error$response3","_error$response3$data"],"sources":["C:/Users/Semicolon Labs/Downloads/fidify/front-end/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3000';\n\nexport const getFeedback = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/feedback/entries`);\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to fetch feedback');\n    }\n    return data.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to fetch feedback');\n  }\n};\n\nexport const createFeedback = async (feedbackData) => {\n  try {\n    const response = await axios.post(`${API_URL}/feedback/entry`, feedbackData);\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to create feedback');\n    }\n    return data.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to create feedback');\n  }\n};\n\nexport const getAnalytics = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/feedback/analytics`);\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to fetch analytics');\n    }\n    return data.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to fetch analytics');\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,mBAAmB,CAAC;IAC/D,MAAMI,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1B,IAAI,CAACA,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,0BAA0B,CAAC;IAC7D;IACA,OAAOH,IAAI,CAACA,IAAI;EAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIJ,KAAK,CAAC,EAAAG,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBH,OAAO,KAAI,0BAA0B,CAAC;EAC9E;AACF,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACc,IAAI,CAAC,GAAGb,OAAO,iBAAiB,EAAEY,YAAY,CAAC;IAC5E,MAAMR,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1B,IAAI,CAACA,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,2BAA2B,CAAC;IAC9D;IACA,OAAOH,IAAI,CAACA,IAAI;EAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAM,gBAAA,EAAAC,qBAAA;IACd,MAAM,IAAIT,KAAK,CAAC,EAAAQ,gBAAA,GAAAN,KAAK,CAACN,QAAQ,cAAAY,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBV,IAAI,cAAAW,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,2BAA2B,CAAC;EAC/E;AACF,CAAC;AAED,OAAO,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,qBAAqB,CAAC;IACjE,MAAMI,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1B,IAAI,CAACA,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,2BAA2B,CAAC;IAC9D;IACA,OAAOH,IAAI,CAACA,IAAI;EAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAS,gBAAA,EAAAC,qBAAA;IACd,MAAM,IAAIZ,KAAK,CAAC,EAAAW,gBAAA,GAAAT,KAAK,CAACN,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBb,IAAI,cAAAc,qBAAA,uBAApBA,qBAAA,CAAsBX,OAAO,KAAI,2BAA2B,CAAC;EAC/E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}